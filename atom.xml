<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Leonid Bugaev]]></title>
  <link href="http://leonsbox.com/atom.xml" rel="self"/>
  <link href="http://leonsbox.com/"/>
  <updated>2012-12-01T19:21:07+04:00</updated>
  <id>http://leonsbox.com/</id>
  <author>
    <name><![CDATA[Leonid Bugaev]]></name>
    <email><![CDATA[leonsbox@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Your code sucks]]></title>
    <link href="http://leonsbox.com/blog/2012/12/01/your-code-sucks/"/>
    <updated>2012-12-01T14:26:00+04:00</updated>
    <id>http://leonsbox.com/blog/2012/12/01/your-code-sucks</id>
    <content type="html"><![CDATA[<p>I know by myself, <strong>EVERY</strong> time when I get new project, with existing code base, first thought is frustration, and desire to rewrite it the way you feels right. And it works for all programmers without exception.</p>

<p>But there is one thing I&#8217;ve learned so far: <strong>you need to stifle your inner grumbler</strong>. If you work in team you have to accept that things not always be as you want. Every developer have its own tricks. You have to trust and learn to delegate.</p>

<p>The only thing that matters is <strong>Business value</strong>. If you want to grow and not be just coder you need to understand this term.</p>

<p>Almost all project go through same stages. And on each stage you have different goal and ways to accomplish them. On earlier stages it means speed of development and rapid prototyping. Further its challenges like growing and scaling team and product. If all goes well, someday you will rewrite all your code to Scala :)</p>

<p>Lack of documentation and some temporary code is <strong>OK</strong> on early stages, it don&#8217;t have to be perfect, it should be good enough. When you ready to jump higher and scale team, things change. You have to think about ease of learning for newcomers, and support costs, because it becomes crucial for business value.</p>

<p>Remember Twitter story. When it was first started it was super buggy Rails app, that was down all the time. Now check where they now, they looks much more like enterprise, Java everywhere, 1500+ employees. Good project is like a book, you can&#8217;t skip and start reading from the middle, you need to pass all stages one-by-one.</p>

<p>Every project have it&#8217;s own unique history, respect it, do not make hasty decisions, always think about business value.</p>

<h2>UPDATE</h2>

<p>For sure I don&#8217;t mean that you should write crappy code. I mostly talking about premature-optimizations. Right now there are lot of tools and techniques that allow to control code quality. At least test, code-reviews and code analysers.</p>

<hr />

<p>You can discuss this post at <a href="http://news.ycombinator.com/item?id=4857463">Hacker News</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open letter to Airbrake.io]]></title>
    <link href="http://leonsbox.com/blog/2012/11/20/open-letter-to-airbrake-dot-io/"/>
    <updated>2012-11-20T13:26:00+04:00</updated>
    <id>http://leonsbox.com/blog/2012/11/20/open-letter-to-airbrake-dot-io</id>
    <content type="html"><![CDATA[<blockquote><p>TL;DR</p><p>If you provide solution for such critical development parts as error tracking, you should work all the time.</p></blockquote>


<p>Imagine that your site is down, you get lot of error, your business loses money. What can make you more angry? Oh, i say: when debug tool you rely on says that you reach limit of errors per minute, and just shows nothing, except this message. When you have multiple servers with multiple apps, digging through logs for errors without tool above becomes real pain.</p>

<p>Our load only about 30r/s, let&#8217;s imagine that something bad happened and  20 of this requests throwing errors. It will immediately reach your limits even on most expensive plan ( 1200 errors/minute - $999), so <strong>upgrading account will not help</strong>. And when you reach this limit, even if you fixed it in 15 minutes, you will get paralyzed for full day. I really want to give you my money, just give me reason.</p>

<h3>Suggestion for Airbrake team:</h3>

<ul>
<li><p>use soft limits, allow bursting. Just stopping working until user will upgrade plan (it will not help, ha ha), is not solution.</p></li>
<li><p>even if limit reached, you should allow view at least 1 error of each type, you can just disable some of functionality like similar errors.</p></li>
</ul>


<p>It&#8217;s a great product, i can see amazing insights, and it helps a lot during development. But it just did&#8217;t work when it is most needed.</p>

<p><strong>When shit happens we loosing more value than you provide.</strong></p>

<h3>Lessons learned</h3>

<p>Do not trust such important parts as debugging to external solution, always have plan B.</p>

<p>You can discuss this post at <a href="http://news.ycombinator.com/item?id=4808539">Hacker News</a></p>
]]></content>
  </entry>
  
</feed>
